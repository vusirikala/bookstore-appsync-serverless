service: serverless-appsync-backend
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

# you can add CloudFormation resource templates here
resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Tags: 
          - Key: Name
            Value: Books-Table
    

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: orderId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: byOrder
            KeySchema:
              - AttributeName:  bookId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL     #Copy all the attributes from the main table to the global secondary indexes
        BillingMode: PAY_PER_REQUEST
        Tags: 
          - Key: Name
            Value: Orders-Table
        

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: BookStoreUserPool
        UsernameAttributes:
          - phone_number
        Schema:
          - Name: email
          - Name: phone_number
          - Name: given_name
          - Name: family_name
          - Name: birthdate


    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: {"Ref": "CognitoUserPool"}


    CognitoAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: {"Ref": "CognitoUserPool"}
        Description: "Admin users belong to this group"
        Precedence: 0         # If a user is part of multiple groups, which groups should be prioritized? 0 means Highest priority
        RoleArn: {"Fn::GetAtt": ["CognitoAdminIAMRole", "Arn"]}
        GroupName: "Admin"

    CognitoCustomerGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: {"Ref": "CognitoUserPool"}
        Description: "Customers belong to this group"
        Precedence: 1         # If a user is part of multiple groups, which groups should be prioritized? 0 means Highest priority
        RoleArn: {"Fn::GetAtt": ["CognitoCustomerIAMRole", "Arn"]}
        GroupName: "Customer"

    CognitoAdminIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "bookstore-admin-role"
        AssumeRolePolicyDocument:     # What service can assume this role
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com" 
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
        Policies:
          - PolicyName: "bookstore-admin-group-policy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: Allow
                  Action: 
                    - "dynamodb:*"
                  Resource: 
                    - {"Fn::GetAtt": ["BooksTable", "Arn"]} 
                    - {"Fn::GetAtt": ["OrdersTable", "Arn"]} 
        
    CognitoCustomerIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "bookstore-customer-role"
        AssumeRolePolicyDocument:     # What service can assume this role
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com" 
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
        Policies:
          - PolicyName: "bookstore-customer-group-policy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: Allow
                  Action: 
                    - "dynamodb:*"
                  Resource: 
                    - {"Fn::GetAtt": ["OrdersTable", "Arn"]} 
                - Effect: Allow
                  Action: 
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                    - "dynamodb:GetBatchItem"
                  Resource: 
                    - {"Fn::GetAtt": ["BooksTable", "Arn"]} 
      
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
